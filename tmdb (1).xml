<?xml version="1.0" encoding="utf-8"?>
<dleplugin>
	<name>TMDB</name>
	<description></description>
	<icon></icon>
	<version>1.0.0</version>
	<dleversion>13</dleversion>
	<versioncompare>greater</versioncompare>
	<upgradeurl></upgradeurl>
	<filedelete>0</filedelete>
	<needplugin></needplugin>
	<mnotice>0</mnotice>
	<mysqlinstall><![CDATA[REPLACE INTO {prefix}_admin_sections (name, title, descr, icon, allow_groups) VALUES ('tmdb', 'TMDB', 'The movie database DLE', 'tmdb.png', '1,2');
CREATE TABLE IF NOT EXISTS `{prefix}_tmdbconfig` (
  `id` int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  `name` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL,
  `value` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `t` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;]]></mysqlinstall>
	<mysqlupgrade><![CDATA[]]></mysqlupgrade>
	<mysqlenable><![CDATA[]]></mysqlenable>
	<mysqldisable><![CDATA[]]></mysqldisable>
	<mysqldelete><![CDATA[]]></mysqldelete>
	<phpinstall><![CDATA[]]></phpinstall>
	<phpupgrade><![CDATA[]]></phpupgrade>
	<phpenable><![CDATA[]]></phpenable>
	<phpdisable><![CDATA[]]></phpdisable>
	<phpdelete><![CDATA[]]></phpdelete>
	<notice><![CDATA[]]></notice>
	<file name="engine/inc/tmdb.php">
		<operation action="create">
			<replacecode><![CDATA[<?php

define("MYMUDOELIDF_DFSADSFDSFJSDJDKJLDSF", true);
include DLEPlugins::Check(ENGINE_DIR . "/inc/tmdb_function.php");
include DLEPlugins::Check(ENGINE_DIR . "/inc/tmdb_tags.php");
$modname = "tmdb";
$sc = new Scripthtml($db, $member_id, 1);
if ($_POST) {
    $sc->save();
}
echoheader("<b><i class=\"fa fa-cogs position-left\"></i>TMDB DLE</b>", "The movie data base dle");
$xfield = xfieldsload();
foreach ($xfield as $key => $value) {
    $field[$value[0]] = ["name" => $value[1], "type" => $value[3]];
}
uasort($field, "cmp");
echo "\r\n  <script>\r\n  \$(function(){\r\n    \$('.categoryselect').chosen({no_results_text: '" . $lang["addnews_cat_fault"] . "'});\r\n        \$('#blacklist').tokenfield({\r\n      autocomplete: {\r\n      minLength: 3,\r\n        delay: 500\r\n      },\r\n      createTokensOnBlur:true\r\n    });\r\n  });\r\n </script>";
echo "<style type=\"text/css\">.menushka i {margin-right: 10px;}.btn-primary {margin: 10px 0px;}.panel-flat {display: none;} .panel{padding-bottom: 20px;} </style>\r\n\r\n<form action=\"javascript:;\" id=\"config\">\r\n\r\n<div class=\"navbar navbar-default navbar-component navbar-xs systemsettings\" style=\"margin-bottom: 0px;\">\r\n<ul class=\"nav navbar-nav visible-xs-block\">\r\n<li class=\"full-width text-center\"><a data-toggle=\"collapse\" data-target=\"#option_menu\"><i class=\"fa fa-bars\"></i></a></li>\r\n</ul>\r\n<div class=\"navbar-collapse collapse\" id=\"option_menu\">\r\n<ul class=\"nav navbar-nav menushka\">\r\n<li class=\"none active\"><a href=\"javascript:;\" class=\"main-tab\" data-tab=\"main\"><i class=\"fa fa-home\" aria-hidden=\"true\"></i>";
echo $tg["menu"]["main"];
echo "</a></li>\r\n<li class=\"none\"><a href=\"javascript:;\" class=\"main-tab\" data-tab=\"osn\"><i class=\"fa fa-file-text-o mr-2\"></i>";
echo $tg["menu"]["osnova"];
echo "</a></li>\r\n<li class=\"none\"><a href=\"javascript:;\" class=\"main-tab\" data-tab=\"xf\"><i class=\"fa fa-list\"></i>";
echo $tg["menu"]["xf"];
echo "</a></li>\r\n<li class=\"none\"><a href=\"javascript:;\" class=\"main-tab\" data-tab=\"category\"><i class=\"fa fa-folder-open-o\" aria-hidden=\"true\"></i>";
echo $tg["menu"]["category"];
echo "</a></li>\r\n<li class=\"none\"><a href=\"javascript:;\" class=\"main-tab\" data-tab=\"images\"><i class=\"fa fa-file-image-o\" aria-hidden=\"true\"></i>";
echo $tg["menu"]["images"];
echo "</a></li>\r\n<li class=\"none\"><a href=\"javascript:;\" class=\"main-tab\" data-tab=\"description\"><i class=\"fa fa-info\" aria-hidden=\"true\"></i>";
echo $tg["menu"]["description"];
echo "</a></li>\r\n</ul>\r\n</div>\r\n</div>\r\n\r\n\r\n\r\n\r\n<div class=\"panel panel-flat tab\" id=\"main\" style=\"display: block;\"> \r\n<div class=\"panel-body\">";
echo $tg["menu"]["ocn"];
echo "</div>\r\n<table class=\"table table-hover\">\r\n";
$sc->checker("main[ssl]", $tg["main"]["ssl"]["title"], $tg["main"]["ssl"]["description"]);
$sc->input("main[author]", $tg["main"]["author"]["title"], $tg["main"]["author"]["description"]);
$sc->input("main[api]", $tg["main"]["api"]["title"], $tg["main"]["api"]["description"]);
$sc->select($tg["modulelaige"], "main[parselaunge]", $tg["main"]["parselaunge"]["title"], $tg["main"]["parselaunge"]["description"]);
$sc->select($tg["parselaunge"], "main[launge]", $tg["main"]["launge"]["title"], $tg["main"]["launge"]["description"]);
echo "</table>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"panel panel-flat tab\" id=\"osn\"> \r\n<div class=\"panel-body\">";
echo $tg["menu"]["data"];
echo "</div>\r\n<table class=\"table table-hover\">\r\n";
foreach ($tg["data"] as $key => $value) {
    $sc->input2("data[" . $key . "]", $value);
}
echo "</table>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"panel panel-flat tab\" id=\"xf\"> \r\n<div class=\"panel-body\">";
echo $tg["menu"]["data"];
echo "</div>\r\n<table class=\"table table-hover\">\r\n";
foreach ($field as $key => $value) {
    $sc->input2("xfield[" . $key . "]", $value["name"]);
}
echo "</table>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"panel panel-flat tab\" id=\"category\"> \r\n<div class=\"panel-body\">";
echo $tg["menu"]["cat"];
echo "</div>\r\n<table class=\"table table-hover\">\r\n";
foreach ($cat_info as $key => $value) {
    unset($parrent);
    if ($value["parentid"]) {
        $parrent = $cat_info[$value["parentid"]]["name"] . " / ";
    }
    $sc->multiselect($parrent . $value["name"], "Выберите жанр для категории " . $value["name"], $tg["category"], "category[" . $value["id"] . "][]");
}
echo "</table>\r\n</div>\r\n\r\n\r\n\r\n\r\n<div class=\"panel panel-flat tab\" id=\"images\"> \r\n<div class=\"panel-body\">";
echo $tg["menu"]["img"];
echo "</div>\r\n<table class=\"table table-hover\">\r\n<thead><tr><td>Постеры</td></tr></thead>\r\n";
$sc->select2($tg["images"]["imagesize"], "img[sizeposter]", $tg["images"]["sizeposter"]["title"], $tg["images"]["sizeposter"]["description"]);
$sc->checker("img[mainposter]", $tg["images"]["mainposter"]["title"], $tg["images"]["mainposter"]["description"]);
$sc->checker("img[dopposter]", $tg["images"]["dopposter"]["title"], $tg["images"]["dopposter"]["description"]);
$sc->input("img[countposter]", $tg["images"]["countposter"]["title"], $tg["images"]["countposter"]["description"]);
$sc->checker("img[selectposter]", $tg["images"]["selectposter"]["title"], $tg["images"]["selectposter"]["description"]);
echo "<thead><tr><td colspan=\"2\">Скриншоты</td></tr></thead>\r\n";
$sc->select2($tg["images"]["imagesize"], "img[sizescreen]", $tg["images"]["sizescreen"]["title"], $tg["images"]["sizescreen"]["description"]);
$sc->checker("img[mainscreen]", $tg["images"]["mainscreen"]["title"], $tg["images"]["mainscreen"]["description"]);
$sc->checker("img[screens]", $tg["images"]["screens"]["title"], $tg["images"]["screens"]["description"]);
$sc->input("img[countscreen]", $tg["images"]["countscreen"]["title"], $tg["images"]["countscreen"]["description"]);
$sc->checker("img[selectscreen]", $tg["images"]["selectscreen"]["title"], $tg["images"]["selectscreen"]["description"]);
echo "</table>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"panel panel-flat tab\" id=\"description\"> \r\n<div class=\"panel-body\"><a id=\"clickme\" style=\"cursor: pointer;\" href=\"javascript:;\">Описание для работы со строками</a></div>\r\n<div style=\" padding: 0px 20px; font-size: 14px;display: none;\" id=\"hide\">\r\n<p>В строках так же доступны функции:</p>\r\n<p>{title limit=\"20\"} выведет первые 20 символов</p>\r\n<p>{type replace=\"tv,movie~Сериал,Фильм} строки tv будет замене на Сериал ,с фильмом также каждую строку указываете через запятую</p>\r\n<p> [title]{title} значение [/title] значение выведеться если есть {title} </p>\r\n<p> [not_title]{title} значение [/not_title] значение выведеться если нет {title} </p>\r\n</div>\r\n\r\n<script type=\"text/javascript\">\r\n  \$( \"#clickme\" ).click(function() {\r\n  \$( \"#hide\" ).slideToggle( \"slow\", function() {\r\n    // Animation complete.\r\n  });\r\n});\r\n\r\n</script>\r\n\r\n\r\n<table class=\"table table-hover\">\r\n";
foreach ($tg["descr"] as $key => $value) {
    $sc->tabletext($value, $key);
}
echo "\r\n\r\n\r\n</table>\r\n</div>\r\n\r\n\r\n\r\n<button type=\"button\" class=\"btn btn-primary\" id=\"save\"><i class=\"fa fa-floppy-o\" aria-hidden=\"true\" style=\"margin-right: 15px;\"></i>Сохранить</button>\r\n\r\n</form>\r\n\r\n\r\n\r\n\r\n\r\n<script type=\"text/javascript\">\r\n\t  \$('.main-tab').on('click', function(){\r\n    let tab = \$(this).attr('data-tab');\r\n    \$('.tab').css('display', 'none');\r\n    \$('#' + tab).css('display', 'block');\r\n    \$('.none').removeClass('active');\r\n    \$(this).parent('li').addClass('active');\r\n  });\r\n\r\n\r\n\$('#save').on('click', function(){\r\n\r\n\$.ajax({\r\ntype: 'POST',\r\nurl: '/";
echo $config["admin_path"];
echo "?mod=";
echo $modname;
echo "',\r\ndata: \$('#config').serialize(),\r\ndataType: \"html\",\r\n        success: function(data){\r\n         Growl.info({\r\n                title: 'Внимание',\r\n                text: 'Настройки сохранены'\r\n        });\r\n     }\r\n});\r\n});\r\n\r\n</script>";

?>]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/ajax/search_tmdb.php">
		<operation action="create">
			<replacecode><![CDATA[<?php

define("MYMUDOELIDF_DFSADSFDSFJSDJDKJLDSF", true);
include DLEPlugins::Check(ENGINE_DIR . "/inc/tmdb_function.php");

$sc = new Scripthtml($db, $member_id, $_POST["key"]);
$q = trim($_POST["search"]);
if (empty($q)) {
    $sc->exitjson(["text" => "Empty q"]);
}
$info = $sc->parser($q, $_POST["type"], $_POST["movietype"], $_POST["posters"], $_POST["screens"], 1);
echo json_encode($info);

?>]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/inc/addnews.php">
		<operation action="after">
			<searchcode><![CDATA[<div class="form-group">
							  <label class="control-label col-sm-2">{$lang['addnews_date']}</label>]]></searchcode>
			<replacecode><![CDATA[<div class="form-group">
<label class="control-label col-sm-2">TMDB search:</label>
<div class="col-sm-10">
<input type="text" class="form-control width-600 position-left" name="tmdbid" id="tmdbid" style=" margin-right: 0px; ">  
<a href="#" class="btn bg-info-800 btn-sm" id="tmdbbutton">Search TMDB</a><i class="help-button visible-lg-inline-block text-primary-600 fa fa-question-circle position-right" data-rel="popover" data-trigger="hover" data-placement="right" data-content="TMDB ID, link, search"></i>
<div id="tmdbResult" style="width:100%;background: #f4f4f4;max-width: 720px;"></div>
</div>
</div>         
                              ]]></replacecode>
			<enabled>1</enabled>
		</operation>
		<operation action="after">
			<searchcode><![CDATA[echo $categoryfilter;]]></searchcode>
			<replacecode><![CDATA[include (DLEPlugins::Check(ENGINE_DIR . '/inc/tmdb_addnews.php'));]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/inc/tmdb_addnews.php">
		<operation action="create">
			<replacecode><![CDATA[<?php
$getconf = $db->query("SELECT * FROM `" . PREFIX . "_tmdbconfig` WHERE `name` LIKE 'config'")->fetch_assoc();
$configs = json_decode($getconf["value"], true);
echo "\r\n\r\n\r\n<style type=\"text/css\">\r\n\t.image-select {\r\n\t \tbackground: #1155c9;\r\n\t }\r\n\t #tmdbResult {\r\n\t \twidth: 100%;\r\n    background: #f4f4f4;\r\n    max-width: 720px;\r\n    max-height: 400px;\r\n    overflow: auto;\r\n\t }\r\n</style>\r\n\r\n\r\n\r\n<script type=\"text/javascript\">\r\n\$(document).on('click', '#tmdbbutton', function(){\r\n    SearchVal(\$('#tmdbid').val(), 'search');\r\n});\r\n\r\n\$(document).on('click', '.add-game', function(){\r\n    \$('.gameinfo').html('');\r\n    SearchVal(\$(this).attr('data-id'), 'search');\r\n});\r\n\r\n\r\n\r\n\$( document ).ready(function() {\r\n\$('#tmdbid').keypress(function (e) {\r\n var key = e.which;\r\n if(key == 13) {\r\n  SearchVal(\$('#tmdbid').val(), 'search');\r\n  }\r\n}); \r\n\r\n});\r\n\r\n\$(document).on('click', '.tmdbmovietype', function(){\r\n\tSearchVal(\$(this).attr('data-id'), 'selectmovie', \$(this).attr('data-type'));\r\n});\r\n\r\n\r\nfunction SearchVal(val, typle, movtype){\r\n\t\$('#tmdbResult').empty();\r\n    \$.ajax({\r\n        type: \"POST\",\r\n        url: \"/engine/ajax/controller.php?mod=search_tmdb\",\r\n        data: {search: val, key: '";
echo "', type: typle, movietype: movtype, posters: window.posters, screens: window.screenshots,},\r\n        beforeSend: ShowLoading(''),\r\n        dataType: \"json\",\r\n        success: function(data){\r\n        HideLoading('');\r\n        if (data.type == 'selecttype') {\r\n        \$('#tmdbResult').html(`<div id=\"tmdbResult\" style=\"width:100%;background: #f4f4f4;max-width: 720px;\"><a href=\"javascript:;\" data-id=\"\${val}\" class=\"tmdbmovietype btn bg-info-800 btn-sm\" data-type=\"movie\" style=\" display: block; margin-top: 10px; \">Movie</a><a href=\"javascript:;\" class=\"tmdbmovietype btn bg-info-800 btn-sm\" data-type=\"tv\" data-id=\"\${val}\" style=\" display: block; margin-top: 10px;\">Tv</a></div>`);\r\n        } else if (data.type == 'imageselect'){\r\n        \tsetposters (data);\r\n        } else if (data.type == 'selectmovie') {\r\n        \tsearchmovies(data);\r\n        } else if (data.type == 'insert') {\r\n        \tInsert(data);\r\n        } else {\r\n        Growl.info({\r\n            title: 'Dikkat',\r\n            text: data.text\r\n        });\r\n        }\r\n     }\r\n});\r\n}\r\n\r\nfunction searchmovies(data){\r\nlet year = '';\r\njQuery.each(data.movies, function(index, itemData) {\r\nif (itemData.first_air_date) {\r\n      year = itemData.first_air_date.split('-');\r\n} else if (itemData.release_date){\r\n\t year = itemData.release_date.split('-');\r\n}\r\n\r\nif (itemData.title) {\r\n      name = itemData.title;\r\n} else {\r\n      name = itemData.name;\r\n}\r\n\r\n\r\n\r\n\$('#tmdbResult').append(`<a href=\"javascript:;\" data-type=\"\${itemData.media_type}\" data-id=\"\${itemData.id}\" class=\"movie\"> <div style=\"display: flex; max-width: 600px; width: 100%;margin-top: 5px;\">\r\n<img src=\"https://image.tmdb.org/t/p/w154/\${itemData.poster_path}\" style=\" margin-right: 20px;max-width: 45px;\"> <div><p>\${name}</p><p>\${year[0]}</p><p>tv</p></div></div></a>`);\r\n});\r\n}\r\n\r\n\$(document).on('click', '.movie', function(){\r\nSearchVal(\$(this).attr('data-id'), 'selectmovie', \$(this).attr('data-type'));\r\n});\r\n\r\n\r\nfunction setposters(data) {\r\n\t\tdelete window.posters;\r\n\t\tdelete window.screenshots;\r\n          \$('#tmdbResult').html(`<div id=\"imageblock\" style=\" max-height: 300px; overflow: auto;margin-top: 5px;\"> </div>\r\n           <a href=\"#\" class=\"btn bg-info-800 btn-sm legitRipple\" id=\"inputimage\" style=\"margin-top: 10px;display: block;\">Sonraki</a>`);\r\n        \tif (data.countposter >= 1) {\r\n        \t\t for (let i = 1; i < data.posters.length; i++) { \r\n                    \$(\"#imageblock\").append ('<img id=\"' + i +'\"   style=\"max-width: 20%;width: 100%;cursor: pointer; padding: 5px;\" src=\"https://image.tmdb.org/t/p/w300' + data.posters[i]  + '\">');\r\n                \t\$(\"#\" + i).click(function() {\r\n                    if (\$(\".image-select\").length < data.countposter){\r\n                    \t\$(\"#\" + i).toggleClass('image-select');\r\n                    } else {\r\n                    \t\$(\"#\" + i).attr('class', '');\r\n                    }\r\n                }); \r\n                }\r\n\r\n                let poster = new Array();\r\n                \$('#inputimage').click(function(){\r\n                \$('.image-select').each(function (index, value) { \r\n                poster[index] = ( \$(this).attr('src'));\r\n                });\r\n                window.posters = poster.join();\r\n     \t\t\tsetimages(data);\r\n        \t});\r\n\r\n} else {\r\n\tsetimages(data);\r\n}\r\n}\r\n\r\nfunction setimages(data){\r\n          \$('#tmdbResult').html(`<div id=\"imageblock\" style=\" max-height: 300px; overflow: auto;margin-top: 5px;\"> </div>\r\n           <a href=\"#\" class=\"btn bg-info-800 btn-sm legitRipple\" id=\"inputimage\" style=\"margin-top: 10px;display: block;\">Sonraki</a>`);\r\n        \tif (data.countscreen >= 1) {\r\n        \t\t for (let i = 1; i < data.images.length; i++) { \r\n                    \$(\"#imageblock\").append ('<img id=\"sc_' + i +'\"   style=\"max-width: 33%;width: 100%;cursor: pointer; padding: 5px;\" src=\"https://image.tmdb.org/t/p/w300' + data.images[i]  + '\">');\r\n                \t\$(\"#sc_\" + i).click(function() {\r\n                    if (\$(\".image-select\").length < data.countscreen) {\r\n                    \t\$(this).toggleClass('image-select')\r\n                    } else {\r\n                    \t\$(this).attr('class', '');\r\n                    }\r\n                }); }\r\n\r\n               let screenshots = new Array();\r\n                \$('#inputimage').click(function(){\r\n                \$('.image-select').each(function (index, value) { \r\n                screenshots[index] = ( \$(this).attr('src'));\r\n                });\r\n                window.screenshots = screenshots.join()\r\n     \t\t\tSearchVal(data.id, 'insert', data.movietype);\r\n        \t});\r\n\r\n} else {\r\n\tSearchVal(data.id, 'insert', data.movietype);\r\n}\r\n\r\n}\r\n\r\n\r\n\r\nfunction SearchGame(data){\r\njQuery.each(data.apps, function(index, itemData) {\r\n\$('.gameinfo').append(`<div class=\"game-app\">\r\n    <div>\r\n    <img src=\"\${itemData.logo}\">\r\n    <a href=\"https://play.google.com/store/apps/details?id=\${itemData.ids}\" target=\"_blank\">\${itemData.title}</a>\r\n    </div>\r\n    <a class=\"add-game\" data-id=\"https://play.google.com/store/apps/details?id=\${itemData.ids}\"><i class=\"fa fa-check-circle-o\" aria-hidden=\"true\"></i>Ekle</a>\r\n</div>`);\r\n\r\n});\r\n}\r\n\r\n\r\n    function Insert(data){\r\n\r\n    jQuery.each(data.data, function(index, itemData) {\r\n    if (\$('[name=\"' + index + '\"]').length) {\r\n    \$('[name=\"' + index + '\"], #' + index + '-tokenfield').val(itemData);\r\n    } else {\r\n        \$('#' + index + ', #' + index + '-tokenfield').val(itemData);\r\n    }\r\n    });\r\n\r\n    if (data.posterimage == 'true') {\r\n    let xfname = data.xfposter;\r\n    UploadImage(xfname, data.poster, data.xf[xfname], data.postername, data.postercode);\r\n    delete data.xf[xfname];\r\n    }\r\n\r\n    jQuery.each(data.xf, function(index, itemData) {\r\n    \$('[name=\"xfield[' + index + ']\"], #xf_' + index + '-tokenfield').val(itemData);\r\n    });\r\n\r\n\r\n     \$(\".categoryselect :selected\").removeAttr(\"selected\");\r\n\r\n    if (data.category) {\r\n    \$.each(data.category.split(','), function(index, value) {\r\n      \$('.categoryselect option[value='+ value +']' ).prop(\"selected\", true);\r\n    }); \r\n\r\n    }     \r\n\r\n    \$('.categoryselect').trigger('chosen:updated');\r\n\r\n\r\n   if (data.images.img) {\r\n    \tjQuery.each(data.images.img, function(index, itemData) {\r\n    \t\tUploadImage(index, itemData, data.xf[index]);\r\n    \t});\r\n    }\r\n\r\n    if (data.images.gallery) {\r\n    jQuery.each(data.images.gallery, function(indexe, itemka) {\r\n    let xfvalue = data.xf[indexe].split(',');\r\n   \tjQuery.each(itemka, function(index, itemData) {\r\n    UploadScreens(indexe, itemData, xfvalue[index]);\r\n    });\r\n    });\r\n    }\r\n\r\n\r\n\r\n    }\r\n\r\nfunction UploadScreens(xfname, link, original){\r\n\tconsole.log(original);\r\n\tlet splitter = link.split(',');\r\n\tlet code = splitter[1];\r\n\tlet key = splitter[0];\r\n\tlink = splitter[2];\r\n\tlet name = 'image';\r\n\t\$('#uploadedfile_' + xfname).append(`<div id=\"xf_\${code}\" data-id=\"\${original}\" data-alt=\"\" class=\"uploadedfile\"><div class=\"info\">\${name}</div><div class=\"uploadimage\"><img style=\"width:auto;height:auto;max-width:100px;max-height:90px;\" src=\"\${link}\"></div><div class=\"info\"><a href=\"#\" onclick=\"xfaddalt('\${code}', '\${xfname}');return false;\">Açıklama</a><br><a href=\"#\" onclick=\"xfimagegalerydelete_\${key}('\${xfname}','\${original}', '\${code}');return false;\">Sil</a></div></div>`);\r\n}\r\n\r\nfunction UploadImage(xfname, link, full){\r\n\t\tlet splitter = link.split(',');\r\n\t\tlet code = splitter[0];\r\n\t\tlink = splitter[1];\r\n\t\tlet info = 'image';\r\n\r\n        \$('#uploadedfile_' + xfname).html(`<div id=\"xf_\${code}\" class=\"uploadedfile\" data-id=\"\${full}\" data-alt=\"\"><div class=\"info\">\${info}</div><div class=\"uploadimage\"><img style=\"width:auto;height:auto;max-width:100px;max-height:90px;\" src=\"\${link}\"></div><div class=\"info\"><a href=\"#\" onclick=\"xfaddalt('\${code}', '\${xfname}');return false;\">Açıklama</a><br><a href=\"#\" onclick=\"xfimagedelete('\${xfname}','\${full}');return false;\">Sil</a></div></div>`);\r\n        \$('#xfupload_' + xfname + ' .qq-upload-button, #xfupload_' + xfname + ' .qq-upload-button input').attr(\"disabled\",\"disabled\");\r\n        let xfield = document.getElementById('xf_' + xfname);\r\n        xfield.value = full;\r\n}\r\n</script>";
?>
]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/inc/tmdb_function.php">
		<operation action="create">
			<replacecode><![CDATA[<?php

if (!defined("MYMUDOELIDF_DFSADSFDSFJSDJDKJLDSF")) {
    exit("Hacking attempt !");
}

class Scripthtml
{
    private $db;
    private $user;
    private $cn;
    private $xfield;
    private $field;
    private $mainuser;
    private $site;

    public function __construct($db, $user)
    {
        $this->db = $db;
        $this->user = $user;
        
        // Veritabanından ayarları çekiyoruz
        $getconf = $db->query("SELECT * FROM `" . PREFIX . "_tmdbconfig` WHERE `name` LIKE 'config'")->fetch_assoc();
        
        // Eğer ayarlar yoksa, varsayılan bir ayar oluşturuyoruz
        if (empty($getconf["id"])) {
            $db->query("INSERT INTO `" . PREFIX . "_tmdbconfig` (`id`, `name`, `value`, `t`) VALUES ('1', 'config', '{\"main\":{\"author\":\"root\",\"api\":\"\",\"parselaunge\":\"tr\",\"launge\":\"tr-TR\"},\"data\":{\"title\":\"[title]{title}[\\/title]\",\"short_story\":\"[description]{description}[\\/description]\",\"full_story\":\"[description]{description}[\\/description]\",\"alt_name\":\"[title]{title}[\\/title]\",\"tags\":\"[title]{title}[\\/title]\",\"meta_title\":\"[title]{title}[\\/title]\",\"descr\":\"[title]{title}[\\/title]\",\"keywords\":\"[title]{title}[\\/title]\"},\"xfield\":{\"poster\":\"{poster_1}\",\"gallery\":\"{screens}\",\"posters\":\"{posters}\",\"duplicatecheck\":\"{type}{id}\",\"name\":\"{title}\"},\"img\":{\"sizeposter\":\"w500\",\"countposter\":\"5\",\"selectposter\":\"1\",\"sizescreen\":\"w500\",\"countscreen\":\"5\",\"selectscreen\":\"1\"}}', '')");
            $getconf = $db->query("SELECT * FROM `" . PREFIX . "_tmdbconfig` WHERE `name` LIKE 'config'")->fetch_assoc();
        }
        
        $this->cn = json_decode($getconf["value"], true);
        $this->site = $this->cn["main"]["ssl"] == "1" ? "https://" . $_SERVER["HTTP_HOST"] : "http://" . $_SERVER["HTTP_HOST"];
        
        // Xfield'ları yükleyip düzenliyoruz
        $this->xfield = xfieldsload();
        foreach ($this->xfield as $key => $value) {
            $this->field[$value[0]] = ["name" => $value[1], "type" => $value[3]];
        }
        uasort($this->field, "cmp");

        // Kullanıcı bilgilerini belirliyoruz
        $this->mainuser = $this->user["name"] ?? $this->cn["main"]["author"];
    }

    public function input($name, $title, $description)
    {
        $config = $this->getconf($name);
        echo "<tr><td class=\"col-xs-6 col-sm-6 col-md-7\"><h6 class=\"media-heading text-semibold\">" . htmlspecialchars($title) . "</h6><span class=\"text-muted text-size-small hidden-xs\">" . htmlspecialchars($description) . "</span></td><td class=\"col-xs-6 col-sm-6 col-md-5\"><input type=\"text\" class=\"form-control\" name=\"" . htmlspecialchars($name) . "\" value=\"" . htmlspecialchars($config) . "\"></td></tr>";
    }

    public function input2($name, $title)
    {
        $config = $this->getconf($name);
        echo "<tr><td colspan=\"2\"><label style=\"float:left;\" class=\"form-label\">" . htmlspecialchars($title) . "</label> <input type=\"text\" autocomplete=\"off\" style=\"float: right;\" value=\"" . htmlspecialchars($config) . "\" class=\"form-control\" name=\"" . htmlspecialchars($name) . "\"></td></tr>";
    }

    public function checker($name, $title, $description)
    {
        $config = $this->getconf($name);
        $ch = $config == "1" ? "checked" : "";
        echo "<tr><td class=\"col-xs-6 col-sm-6 col-md-7\"><h6 class=\"media-heading text-semibold\">" . htmlspecialchars($title) . "</h6><span class=\"text-muted text-size-small hidden-xs\">" . htmlspecialchars($description) . "</span></td><td class=\"col-xs-6 col-sm-6 col-md-5\"><input class=\"switch\" type=\"checkbox\" name=\"" . htmlspecialchars($name) . "\" value=\"1\" data-switchery=\"true\" style=\"display: none;\" " . $ch . "></td></tr>";
    }

    public function select($field, $name, $title, $description)
    {
        $config = $this->getconf($name);
        array_unshift($field, "-");
        echo "<tr><td class=\"col-xs-6 col-sm-6 col-md-7\"><h6 class=\"media-heading text-semibold\">" . htmlspecialchars($title) . "</h6><span class=\"text-muted text-size-small hidden-xs\">" . htmlspecialchars($description) . "</span></td><td class=\"col-xs-6 col-sm-6 col-md-5\"><select class=\"uniform\" name=\"" . htmlspecialchars($name) . "\" tabindex=\"-98\">";
        foreach ($field as $key => $value) {
            $selected = $key == $config ? "selected=\"true\"" : "";
            echo "<option value=\"" . htmlspecialchars($key) . "\" " . $selected . ">" . htmlspecialchars($value) . "</option>";
        }
        echo "</select></td></tr>";
    }

    public function select2($field, $name, $title, $description)
    {
        $this->select($field, $name, $title, $description); // select ile aynı işlevde
    }

    public function multiselect($title, $description, $categories, $name)
    {
        $config = $this->getconf($name);
        $newconfig = is_array($config) ? array_flip($config) : [];
        echo "<tr><td class=\"col-xs-6 col-sm-6 col-md-7\"><h6 class=\"media-heading text-semibold\">" . htmlspecialchars($title) . "</h6><span class=\"text-muted text-size-small hidden-xs\">" . htmlspecialchars($description) . "</span></td><td class=\"col-xs-6 col-sm-6 col-md-5\"><select class=\"categoryselect\" data-placeholder=\"Kategori Seçiniz...\" title=\"Kategori Seçiniz...\" multiple  name=\"" . htmlspecialchars($name) . "\">";
        foreach ($categories as $key => $value) {
            $selected = isset($newconfig[$key]) ? "selected=\"true\"" : "";
            echo "<option value=\"" . htmlspecialchars($key) . "\" " . $selected . ">" . htmlspecialchars($value) . "</option>";
        }
        echo "</select></td></tr>";
    }

    public function textpint($title, $name)
    {
        echo "<tr><td class=\"col-xs-6 col-sm-6 col-md-7\"><h6 class=\"media-heading text-semibold\" style=\" font-weight: 400; \">" . htmlspecialchars($title) . "</h6></td><td class=\"col-xs-6 col-sm-6 col-md-5\">[" . htmlspecialchars($name) . "]{" . htmlspecialchars($name) . "}[/" . htmlspecialchars($name) . "]</td></tr>";
    }

    public function save()
{
    if (isset($_POST) && !empty($_POST)) {
        error_log('POST verileri alındı: ' . print_r($_POST, true));
        $res = json_encode($_POST);

        if (json_last_error() !== JSON_ERROR_NONE) {
            error_log('JSON encode hatası: ' . json_last_error_msg());
            return;
        }

        $res = $this->db->safesql($res);
        $result = $this->db->query("UPDATE `" . PREFIX . "_tmdbconfig` SET `value` = '" . $res . "' WHERE `name` LIKE 'config'");

        if ($result) {
            error_log('Veritabanı güncelleme başarılı.');

            // JSON verisini tmdb_grub.config dosyasına yaz
            file_put_contents('engine/data/tmdb_grub.config', $res);

        } else {
            error_log('SQL sorgu hatası: ' . $this->db->error);
        }
    } else {
        error_log('POST verisi alınamadı veya boş.');
    }
}


    public function tabletext($name, $tag)
    {
        echo "<tr><td class=\"col-xs-6 col-sm-6 col-md-7\"><h6 class=\"media-heading text-semibold\">" . htmlspecialchars($name["name"]) . "</h6><span class=\"text-muted text-size-small hidden-xs\">" . htmlspecialchars($name["descr"]) . "</span></td><td class=\"col-xs-6 col-sm-6 col-md-5\">[" . htmlspecialchars($tag) . "]{" . htmlspecialchars($tag) . "}[/" . htmlspecialchars($tag) . "]</td></tr>";
    }

    public function parser($q, $type, $movitype, $posters, $screens, $check)
    {
        if ($check && $this->usercheck()) {
            return ["text" => "Error key"];
        }
        if ($type == "search") {
            if (ctype_digit($q)) {
                return ["type" => "selecttype"];
            }
            if (preg_match("/\\/(?<type>(movie|tv))\\/(?<id>\\d+)/", $q, $movie)) {
                return $this->checkyou($movie["id"], $movie["type"]);
            }
            return $this->searchmovie($q);
        }
        if ($type == "selectmovie") {
            return $this->checkyou($q, $movitype);
        }
        if ($type == "insert") {
            return $this->finishparse($q, $movitype, $screens, $posters);
        }
    }

    public function searchmovie($q)
    {
        $url = file_get_contents("https://api.themoviedb.org/3/search/multi?api_key=" . $this->cn["main"]["api"] . "&language=" . $this->cn["main"]["launge"] . "&query=" . urlencode($q) . "&page=1");
        $inf = json_decode($url, true);
        if (isset($inf["total_results"]) && $inf["total_results"] > 0) {
            $result["movies"] = $inf["results"];
            $result["type"] = "selectmovie";
            return $result;
        }
        return NULL;
    }

    public function checkyou($id, $type)
    {
        if ($this->checkduplicate($type . $id)) {
            return ["text" => "duplicate"];
        }
        $image = $this->imagecheck($id, $type);
        if ($image != NULL) {
            $image["type"] = "imageselect";
            return $image;
        }
        return $this->finishparse($id, $type, NULL, NULL);
    }

    public function imagecheck($id, $type)
    {
        if ($this->cn["img"]["selectposter"] != 1 && $this->cn["img"]["selectscreen"] != 1 || $this->cn["img"]["dopposter"] != 1 && $this->cn["img"]["screens"] != 1) {
            return NULL;
        }
        $img_url = file_get_contents("https://api.themoviedb.org/3/" . $type . "/" . $id . "/images?api_key=" . $this->cn["main"]["api"]);
        $img_info = json_decode($img_url, true);
        $res = [];

        if (isset($img_info["backdrops"]) && $this->cn["img"]["screens"] == 1 && count($img_info["backdrops"]) > 0 && $this->cn["img"]["selectscreen"] == 1) {
            $res["images"] = array_column($img_info["backdrops"], "file_path");
        }

        if (isset($img_info["posters"]) && $this->cn["img"]["dopposter"] == 1 && count($img_info["posters"]) > 0 && $this->cn["img"]["selectposter"] == 1) {
            $res["posters"] = array_column($img_info["posters"], "file_path");
        }

        if (isset($res["posters"])) {
            $res["countposter"] = $this->cn["img"]["countposter"];
        }

        if (isset($res["images"])) {
            $res["countscreen"] = $this->cn["img"]["countscreen"];
        }

        if (isset($res["countscreen"]) || isset($res["countposter"])) {
            $res["id"] = $id;
            $res["movietype"] = $type;
            return $res;
        }

        return NULL;
    }

    public function finishparse($id, $type, $images, $posters)
    {
        $img_info = NULL;
        $poster = [];
        $screen = [];

        if ($this->cn["img"]["dopposter"] == 1 || $this->cn["img"]["screens"] == 1) {
            $img_url = file_get_contents("https://api.themoviedb.org/3/" . $type . "/" . $id . "/images?api_key=" . $this->cn["main"]["api"]);
            $img_info = json_decode($img_url, true);
        }

        if (isset($img_info["posters"]) && $this->cn["img"]["dopposter"] == 1 && count($img_info["posters"]) > 0) {
            $postertik = array_column($img_info["posters"], "file_path");
            $ids_posters = $posters ? explode(",", str_replace("https://image.tmdb.org/t/p/w300", "", $posters)) : [];
            $posterlist = array_merge($ids_posters, array_diff($postertik, $ids_posters));
            for ($i = 0; $i < $this->cn["img"]["countposter"]; $i++) {
                if (isset($posterlist[$i])) {
                    $poster[$i] = $this->uploadimage("https://image.tmdb.org/t/p/" . $this->cn["img"]["sizeposter"] . $posterlist[$i]);
                }
            }
        }

        if (isset($img_info["backdrops"]) && $this->cn["img"]["screens"] == 1 && count($img_info["backdrops"]) > 0) {
            $screentik = array_column($img_info["backdrops"], "file_path");
            $ids_image = $images ? explode(",", str_replace("https://image.tmdb.org/t/p/w300", "", $images)) : [];
            $screenlist = array_merge($ids_image, array_diff($screentik, $ids_image));
            for ($i = 0; $i < $this->cn["img"]["countscreen"]; $i++) {
                if (isset($screenlist[$i])) {
                    $screen[$i] = $this->uploadimage("https://image.tmdb.org/t/p/" . $this->cn["img"]["sizescreen"] . $screenlist[$i]);
                }
            }
        }

        $mov = file_get_contents("https://api.themoviedb.org/3/" . $type . "/" . $id . "?api_key=" . $this->cn["main"]["api"] . "&language=" . $this->cn["main"]["launge"] . "&append_to_response=videos,credits");
        $inf = json_decode($mov, true);

        if (empty($inf["id"])) {
            return NULL;
        }

        $backdrop = isset($inf["backdrop_path"]) && $this->cn["img"]["mainscreen"] == 1 ? $this->uploadimage("https://image.tmdb.org/t/p/" . $this->cn["img"]["sizescreen"] . $inf["backdrop_path"]) : NULL;
        $posterpath = isset($inf["poster_path"]) && $this->cn["img"]["mainposter"] == 1 ? $this->uploadimage("https://image.tmdb.org/t/p/" . $this->cn["img"]["sizeposter"] . $inf["poster_path"]) : NULL;

        if ($type == "tv") {
            $title = $inf["name"];
            $original_title = $inf["original_name"];
            $years = explode("-", $inf["first_air_date"]);
            $release_date = $inf["first_air_date"];
            $year = $years[0];
            $runtime = $inf["episode_run_time"][0];
        } else {
            $title = $inf["title"];
            $original_title = $inf["original_title"];
            $runtime = $inf["runtime"];
            $years = explode("-", $inf["release_date"]);
            $release_date = $inf["release_date"];
            $year = $years[0];
        }

        $data = [
            "title" => ["val" => $title, "type" => "text"],
            "original_language" => ["val" => $inf["original_language"], "type" => "text"],
            "original_title" => ["val" => $original_title, "type" => "text"],
            "description" => ["val" => $inf["overview"], "type" => "text"],
            "popularity" => ["val" => $inf["popularity"], "type" => "text"],
            "revenue" => ["val" => $inf["revenue"], "type" => "text"],
            "runtime" => ["val" => $runtime, "type" => "text"],
            "time" => ["val" => (int) ($runtime / 60) . ":" . $runtime % 60, "type" => "text"],
            "status" => ["val" => $inf["status"], "type" => "text"],
            "tagline" => ["val" => $inf["tagline"], "type" => "text"],
            "vote_average" => ["val" => $inf["vote_average"], "type" => "text"],
            "id" => ["val" => $inf["id"], "type" => "text"],
            "imdb_id" => ["val" => $inf["imdb_id"], "type" => "text"],
            "type" => ["val" => $type, "type" => "text"],
            "budget" => ["val" => $inf["budget"], "type" => "text"],
            "year" => ["val" => $year, "type" => "text"],
            "release_date" => ["val" => $release_date, "type" => "text"],
            "genres" => ["val" => $this->keyarray($inf["genres"], "name"), "type" => "text"],
            "production_companies" => ["val" => $this->keyarray($inf["production_companies"], "name"), "type" => "text"],
            "spoken_languages" => ["val" => $this->keyarray($inf["spoken_languages"], "name"), "type" => "text"],
            "cast" => ["val" => $this->keyarray($inf["credits"]["cast"], "name"), "type" => "text"],
            "crew" => ["val" => $this->keyarray($inf["credits"]["crew"], "name"), "type" => "text"],
            "production_countries" => ["val" => $this->keyarray($inf["production_countries"], "name"), "type" => "text"],
            "posterpath" => ["val" => $posterpath, "type" => "image"],
            "backdrop" => ["val" => $backdrop, "type" => "image"],
            "screens" => ["val" => implode(",", $screen), "type" => "gallery"],
            "posters" => ["val" => implode(",", $poster), "type" => "gallery"]
        ];

        for ($i = 1; $i < 60; $i++) {
            $data["screen_" . $i] = ["val" => $screen[$i - 1] ?? NULL, "type" => "image"];
        }

        for ($i = 1; $i < 60; $i++) {
            $data["poster_" . $i] = ["val" => $poster[$i - 1] ?? NULL, "type" => "image"];
        }

        foreach ($this->cn["xfield"] as $key => $value) {
            $finishes["xf"][$key] = $this->strchecker($value, $data, $key);
        }

        foreach ($this->cn["data"] as $key => $value) {
            $finishes["data"][$key] = $this->strchecker($value, $data, NULL);
        }

        $finishes["category"] = $this->catparser($inf["genres"], $type, $inf["production_countries"], $data["year"]["val"]);
        $finishes["type"] = "insert";
        $finishes["images"] = $this->imegeska;

        return $finishes;
    }

    public function strchecker($theval, $array, $xfkey)
    {
        $arrma = [];
        foreach ($array as $key => $value) {
            if (strpos($theval, "[" . $key . "]") !== false) {
                $theval = $value["val"] ? preg_replace(";\\[" . $key . "\\](.*?)\\[\\/" . $key . "\\];is", "\$1", $theval) : preg_replace(";\\[" . $key . "\\](.*?)\\[\\/" . $key . "\\];is", "", $theval);
            }

            if ($value["val"] != NULL && preg_match("/{" . $key . "[^}]*}/", $theval)) {
                if ($xfkey) {
                    $type = $this->field[$xfkey]["type"];
                    if ($type == "image" && $value["type"] == "image") {
                        if ($this->imgcheck($xfkey, $value["val"])) {
                            $this->imegeska["img"][$xfkey] = md5($value["val"]) . "," . "/uploads/posts/" . preg_replace("/(\\d+-\\d+)/", "\$1/thumbs", $array[$key]["val"]);
                        } else {
                            $this->imegeska["img"][$xfkey] = md5($value["val"]) . "," . "/uploads/posts/" . $array[$key]["val"];
                        }
                    } else {
                        if ($type == "text" && $value["type"] == "image") {
                            $array[$key]["val"] = "/uploads/posts/" . $value["val"];
                        } else {
                            if ($type == "imagegalery" && $value["type"] == "gallery") {
                                $this->gallerycheck($xfkey, $value["val"]);
                            } else {
                                if ($type == "text" && $value["type"] == "gallery") {
                                    $array[$key]["val"] = "/uploads/posts/" . str_replace(",", ",/uploads/posts/", $value["val"]);
                                }
                            }
                        }
                    }
                } else {
                    if ($value["type"] == "image") {
                        $array[$key]["val"] = "/uploads/posts/" . $value["val"];
                    }
                }

                if (preg_match("/{" . $key . "[^}]*limit=\"(?<limit>\\d+)\"/", $theval, $l)) {
                    $array[$key]["val"] = mb_substr($value["val"], 0, $l["limit"]);
                }

                if (preg_match("/{key(.*?)(replace=\"(?<search>[^\"]+)~(?<replace>[^\"]+)\")/", $theval, $match)) {
                    $array[$key]["val"] = str_replace(explode(",", $match["search"]), explode(",", $match["replace"]), $value["val"]);
                }
            }

            if (strpos($theval, "[not_" . $key . "]") !== false) {
                $theval = $value["val"] ? preg_replace(";\\[not_" . $key . "\\](.*?)\\[\\/not_" . $key . "\\];is", "", $theval) : preg_replace(";\\[not_" . $key . "\\](.*?)\\[\\/not_" . $key . "\\];is", "\$1", $theval);
            }

            $theval = preg_replace("/{" . $key . "[^}]+}/", "{" . $key . "}", $theval);
            $arrma[$key] = "{" . $key . "}";
        }
        return str_ireplace($arrma, array_column($array, "val"), $theval);
    }

    public function gallerycheck($xf, $screens)
    {
        $ar = explode(",", $screens);
        $res = false;
        foreach ($ar as $value) {
            $res = $this->imgcheck($xf, $value);
        }

        foreach ($ar as $value) {
            if ($res) {
                $this->imegeska["gallery"][$xf][] = md5($xf) . "," . md5($value) . ",/uploads/posts/" . preg_replace("/(\\d+-\\d+)/", "\$1/thumbs", $value);
            } else {
                $this->imegeska["gallery"][$xf][] = md5($xf) . "," . md5($value) . ",/uploads/posts/" . $value;
            }
        }

        return false;
    }

    public function imgcheck($xf, $urlimage)
    {
        $thumb = ROOT_DIR . "/uploads/posts/" . preg_replace("/(\\d+-\\d+)/", "\$1/thumbs/", $urlimage);
        $uploads = ROOT_DIR . "/uploads/posts/" . $urlimage;
        $arr_new = array_column($this->xfield, NULL, "0");
        $realxf = $arr_new[$xf];

        if ($realxf[12] == "1") {
            $dimensions = explode("x", $realxf[13]);
            $width = $dimensions[0];
            $height = $dimensions[1] ?? NULL;
            $this->imagesizest($thumb, $uploads, $width, $height, 100);
            return true;
        }

        return false;
    }

    public function imagesizest($outfile, $infile, $width, $height, $quality)
    {
        $dir_path = ROOT_DIR . "/uploads/posts/" . date("Y-m");
        if (!is_dir($dir_path . "/thumbs")) {
            mkdir($dir_path . "/thumbs", 511, true);
        }

        $im = stristr($infile, "png") ? imagecreatefrompng($infile) : (stristr($infile, "webp") ? imagecreatefromwebp($infile) : imagecreatefromjpeg($infile));
        $w = $width;
        $h = $height ?? intval($width / (imagesx($im) / 100) * imagesy($im) / 100);

        $im1 = imagecreatetruecolor($w, $h);
        imagecopyresampled($im1, $im, 0, 0, 0, 0, $w, $h, imagesx($im), imagesy($im));
        imagejpeg($im1, $outfile, $quality);
        imagedestroy($im);
        imagedestroy($im1);
    }

    public function keyarray($ar, $key)
    {
        $newray = [];
        foreach ($ar as $i => $value) {
            $newray[] = $value[$key];
            if ($i >= 6) {
                break;
            }
        }
        return implode(", ", $newray);
    }

    public function uploadimage($url)
    {
        if (empty($url)) {
            return NULL;
        }

        $dir = date("Y-m");
        $dir_path = ROOT_DIR . "/uploads/posts/" . $dir;
        $files = $this->getcontents($url);
        $file_name = md5($url) . "_image.jpeg";

        if (!is_dir($dir_path)) {
            mkdir($dir_path, 511, true);
        }

        file_put_contents($dir_path . "/" . $file_name, $files["file"]);

        if ($this->bdimage) {
                        $this->db->query("UPDATE `" . PREFIX . "_images` SET `images` = concat(images,'|||" . $dir . "/" . $file_name . "')  WHERE `news_id` = 0 AND `author` LIKE '" . $this->mainuser . "'");
        } else {
            $time = time();
            $this->db->query("INSERT INTO `" . PREFIX . "_images` (`id`, `images`, `news_id`, `author`, `date`) VALUES (NULL, '" . $dir . "/" . $file_name . "', '0', '" . $this->mainuser . "', '" . $time . "');");
            $this->bdimage = $this->db->insert_id();
        }

        return $dir . "/" . $file_name;
    }

    public function catparser($tmdbcat, $movietype, $country, $year)
    {
        $newar[$year] = $year;

        foreach ($country as $key => $value) {
            $newar[$value["iso_3166_1"]] = $value["iso_3166_1"];
        }

        foreach ($tmdbcat as $key => $value) {
            $newar[$value["id"]] = $value["id"];
        }

        if ($movietype == "movie" && isset($newar[2])) {
            $movietype = "2";
        } elseif ($movietype == "tv" && isset($newar[16])) {
            $movietype = "cartoontv";
        }

        $newar[$movietype] = $movietype;
        $maincats = ["movie" => "movie", "tv" => "tv", "cartoontv" => "cartoontv", "2" => "2"];
        $oncat = [];

        foreach ($this->cn["category"] as $key => $value) {
            foreach ($value as $value1) {
                if (isset($newar[$value1])) {
                    if (count($this->cn["category"][$key]) == 1) {
                        $oncat[$key] = $key;
                    } else {
                        if (in_array($movietype, $this->cn["category"][$key]) && $this->entryckeck($this->cn["category"][$key], $newar, $movietype)) {
                            $oncat[$key] = $key;
                        } elseif (count($this->cn["category"][$key]) >= 2 && in_array($movietype, $this->cn["category"][$key]) && $this->badcheck($this->cn["category"][$key], $maincats)) {
                            $oncat[$key] = $key;
                        }
                    }
                }
            }
        }

        return implode(",", $oncat);
    }

    public function badcheck($arr1, $arr2)
    {
        foreach ($arr1 as $value) {
            if (!isset($arr2[$value])) {
                return NULL;
            }
        }
        return true;
    }

    public function entryckeck($arr, $arr2, $unset)
    {
        unset($arr2[$unset]);
        foreach ($arr as $value) {
            if (isset($arr2[$value])) {
                return true;
            }
        }
        return NULL;
    }

    public function checkduplicate($str)
    {
        return $this->db->query("SELECT * FROM `" . PREFIX . "_post` WHERE `xfields` LIKE '%" . $str . "%'")->num_rows;
    }

    public function usercheck()
    {
        return NULL;
    }

    public function getcontents($url)
    {
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_ENCODING, "");
        $res["file"] = curl_exec($ch);
        $res["header"] = curl_getinfo($ch, CURLINFO_CONTENT_TYPE);
        curl_close($ch);
        return $res;
    }

    public function getconf($name)
    {
        preg_match("/(?<main>.*?)\\[(?<name>.*?)\\]/", $name, $con);
        return $this->cn[$con["main"]][$con["name"]];
    }

    public function exitjson($arr)
    {
        echo json_encode($arr);
        exit;
    }

    public function getimages()
    {
        return $this->imegeska;
    }
}

function cmp($a)
{
    if ($a["type"] == "image" || $a["type"] == "imagegalery") {
        return 0;
    }
    return 1;
}
?>
]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/inc/tmdb_tags.php">
		<operation action="create">
			<replacecode><![CDATA[<?php
$tg = [
'category' => [
    'movie' => 'Filmler','tv' => 'Diziler','cartoontv' => 'Çizgi Dizi','28' => 'Aksiyon [movie]','12' => 'Macera [movie]','2' => 'Animasyon [movie]','90' => 'Belgesel [movie]','10751' => 'Aile','14' => 'Fantastik [movie]','36' => 'Tarih [movie]','27' => 'Korku [movie]','10749' => 'Romantik [movie]','878' => 'Bilim Kurgu [movie]','10770' => 'Televizyon Filmi [movie]','53' => 'Gerilim [movie]','10752' => 'Savaş [movie]','10759' => 'Aksiyon ve Macera [tv]','16' => 'Animasyon [tv]','99' => 'Belgesel [tv]','10762' => 'Çocuk [tv]','10763' => 'Haber [tv]','10764' => 'Reality Show [tv]','10765' => 'Bilim Kurgu ve Fantastik [tv]','10766' => 'Pembe Dizi [tv]','10767' => 'Talk Show [tv]','10768' => 'Savaş ve Politika [tv]','35' => 'Komedi','80' => 'Suç','37' => 'Western','9648' => 'Gizem','18' => 'Drama', 'AD' => 'Andorra','AE' => 'Birleşik Arap Emirlikleri','AF' => 'Afganistan','AG' => 'Antigua ve Barbuda','AI' => 'Anguilla','AL' => 'Arnavutluk','AM' => 'Ermenistan','AN' => 'Hollanda Antilleri','AO' => 'Angola','AQ' => 'Antarktika','AR' => 'Arjantin','AS' => 'Amerikan Samoası','AT' => 'Avusturya','AU' => 'Avustralya','AW' => 'Aruba','AZ' => 'Azerbaycan','BA' => 'Bosna-Hersek','BB' => 'Barbados','BD' => 'Bangladeş','BE' => 'Belçika','BF' => 'Burkina Faso','BG' => 'Bulgaristan','BH' => 'Bahreyn','BI' => 'Burundi','BJ' => 'Benin','BM' => 'Bermuda','BN' => 'Brunei Darussalam','BO' => 'Bolivya','BR' => 'Brezilya','BS' => 'Bahamalar','BT' => 'Butan','BV' => 'Bouvet Adası','BW' => 'Botsvana','BZ' => 'Belize','BY' => 'Belarus','CA' => 'Kanada','CC' => 'Cocos Adaları','CD' => 'Kongo','CF' => 'Orta Afrika Cumhuriyeti','CG' => 'Kongo','CH' => 'İsviçre','CI' => 'Fildişi Sahili','CK' => 'Cook Adaları','CL' => 'Şili','CM' => 'Kamerun','CN' => 'Çin','CO' => 'Kolombiya','CR' => 'Kosta Rika','CS' => 'Sırbistan ve Karadağ','CU' => 'Küba','CV' => 'Yeşil Burun Adaları','CX' => 'Christmas Adası','CY' => 'Kıbrıs','CZ' => 'Çek Cumhuriyeti','DE' => 'Almanya','DJ' => 'Cibuti','DK' => 'Danimarka','DM' => 'Dominika','DO' => 'Dominik Cumhuriyeti','DZ' => 'Cezayir','EC' => 'Ekvador','EE' => 'Estonya','EG' => 'Mısır','EH' => 'Batı Sahra','ER' => 'Eritre','ES' => 'İspanya','ET' => 'Etiyopya','FI' => 'Finlandiya','FJ' => 'Fiji','FK' => 'Falkland Adaları','RS' => 'Sırbistan','FM' => 'Mikronezya','FO' => 'Faroe Adaları','FR' => 'Fransa','GA' => 'Gabon','GB' => 'Birleşik Krallık','GD' => 'Grenada','GE' => 'Gürcistan','GF' => 'Fransız Guyanası','GH' => 'Gana','GI' => 'Cebelitarık','GL' => 'Grönland','GM' => 'Gambiya','GN' => 'Gine','GP' => 'Guadeloupe','GQ' => 'Ekvator Ginesi','GR' => 'Yunanistan','GS' => 'Güney Georgia ve Güney Sandwich Adaları','GT' => 'Guatemala','GU' => 'Guam','GW' => 'Gine-Bissau','GY' => 'Guyana','HK' => 'Hong Kong','HM' => 'Heard ve McDonald Adaları','HN' => 'Honduras','HR' => 'Hırvatistan','HT' => 'Haiti','HU' => 'Macaristan','ID' => 'Endonezya','IE' => 'İrlanda','IL' => 'İsrail','IN' => 'Hindistan','IO' => 'Britanya Hint Okyanusu Toprağı','IQ' => 'Irak','IR' => 'İran','IS' => 'İzlanda','IT' => 'İtalya','JM' => 'Jamaika','JO' => 'Ürdün','JP' => 'Japonya','KE' => 'Kenya','KG' => 'Kırgızistan','KH' => 'Kamboçya','KI' => 'Kiribati','KM' => 'Komorlar','KN' => 'Saint Kitts ve Nevis','KP' => 'Kuzey Kore','KW' => 'Kuveyt','KY' => 'Cayman Adaları','KZ' => 'Kazakistan','LA' => 'Laos','LB' => 'Lübnan','LC' => 'Saint Lucia','LI' => 'Liechtenstein','LK' => 'Sri Lanka','LR' => 'Liberya','LS' => 'Lesotho','LT' => 'Litvanya','LU' => 'Lüksemburg','LV' => 'Letonya','LY' => 'Libya','MA' => 'Fas','MC' => 'Monako','MD' => 'Moldova','MG' => 'Madagaskar','MH' => 'Marshall Adaları','MK' => 'Makedonya','ML' => 'Mali','MM' => 'Myanmar','MN' => 'Moğolistan','MO' => 'Makao','MP' => 'Kuzey Mariana Adaları','MQ' => 'Martinique','MR' => 'Moritanya','MS' => 'Montserrat','MT' => 'Malta','MU' => 'Mauritius','MV' => 'Maldivler','MW' => 'Malavi','MX' => 'Meksika','MY' => 'Malezya','MZ' => 'Mozambik','NA' => 'Namibya','NC' => 'Yeni Kaledonya','NE' => 'Nijer','NF' => 'Norfolk Adası','NG' => 'Nijerya','ME' => 'Karadağ','NI' => 'Nikaragua','NL' => 'Hollanda','NO' => 'Norveç','NP' => 'Nepal','NR' => 'Nauru','NU' => 'Niue','NZ' => 'Yeni Zelanda','OM' => 'Umman','PA' => 'Panama','PE' => 'Peru','PF' => 'Fransız Polinezyası','PG' => 'Papua Yeni Gine','PH' => 'Filipinler','YU' => 'Yugoslavya','XK' => 'Kosova','XC' => 'Çekoslovakya','PK' => 'Pakistan','PL' => 'Polonya','PM' => 'Saint Pierre ve Miquelon','PN' => 'Pitcairn Adası','PR' => 'Porto Riko','PS' => 'Filistin Toprağı','PT' => 'Portekiz','PW' => 'Palau','PY' => 'Paraguay','QA' => 'Katar','RE' => 'Reunion','RO' => 'Romanya','RU' => 'Rusya','RW' => 'Ruanda','SA' => 'Suudi Arabistan','SB' => 'Solomon Adaları','SC' => 'Seyşeller','SD' => 'Sudan','SE' => 'İsveç','SG' => 'Singapur','SH' => 'Saint Helena','SI' => 'Slovenya','SJ' => 'Svalbard ve Jan Mayen Adaları','SK' => 'Slovakya','SL' => 'Sierra Leone','SM' => 'San Marino','SN' => 'Senegal','SO' => 'Somali','SR' => 'Surinam','ST' => 'Sao Tome ve Principe','SV' => 'El Salvador','SY' => 'Suriye Arap Cumhuriyeti','SZ' => 'Svaziland','TC' => 'Turks ve Caicos Adaları','TD' => 'Çad','TF' => 'Fransız Güney Toprakları','TG' => 'Togo','TH' => 'Tayland','TJ' => 'Tacikistan','TK' => 'Tokelau','TL' => 'Doğu Timor','TM' => 'Türkmenistan','TN' => 'Tunus','TO' => 'Tonga','TR' => 'Türkiye','TT' => 'Trinidad ve Tobago','TV' => 'Tuvalu','TW' => 'Tayvan','TZ' => 'Tanzanya','UA' => 'Ukrayna','UG' => 'Uganda','UM' => 'Amerika Birleşik Devletleri Küçük Dış Adaları','US' => 'Amerika Birleşik Devletleri','UY' => 'Uruguay','UZ' => 'Özbekistan','VA' => 'Vatikan','VC' => 'Saint Vincent ve Grenadinler','VE' => 'Venezuela','VG' => 'Britanya Virjin Adaları','VI' => 'ABD Virjin Adaları','VN' => 'Vietnam','VU' => 'Vanuatu','WF' => 'Wallis ve Futuna Adaları','WS' => 'Samoa','YE' => 'Yemen','YT' => 'Mayotte','ZA' => 'Güney Afrika','ZM' => 'Zambiya','ZW' => 'Zimbabve','KR' => 'Güney Kore','XG' => 'Doğu Almanya','SU' => 'Sovyetler Birliği','SS' => 'Güney Sudan','1960' => '1960','1961' => '1961','1962' => '1962','1963' => '1963','1964' => '1964','1965' => '1965','1966' => '1966','1967' => '1967','1968' => '1968','1969' => '1969','1970' => '1970','1971' => '1971','1972' => '1972','1973' => '1973','1974' => '1974','1975' => '1975','1976' => '1976','1977' => '1977','1978' => '1978','1979' => '1979','1980' => '1980','1981' => '1981','1982' => '1982','1983' => '1983','1984' => '1984','1985' => '1985','1986' => '1986','1987' => '1987','1988' => '1988','1989' => '1989','1990' => '1990','1991' => '1991','1992' => '1992','1993' => '1993','1994' => '1994','1995' => '1995','1996' => '1996','1997' => '1997','1998' => '1998','1999' => '1999','2000' => '2000','2001' => '2001','2002' => '2002','2003' => '2003','2004' => '2004','2005' => '2005','2006' => '2006','2007' => '2007','2008' => '2008','2009' => '2009','2010' => '2010','2011' => '2011','2012' => '2012','2013' => '2013','2014' => '2014','2015' => '2015','2016' => '2016','2017' => '2017','2018' => '2018','2019' => '2019','2020' => '2020','2021' => '2021','2022' => '2022','2023' => '2023','2024' => '2024',
],

'menu' => [
    'main' => 'Ana Sayfa',
    'osnova' => 'Temel',
    'ocn' => 'Ana Ayarlar',
    'data' => 'Temel Alanlar',
    'xf' => 'Ek Alanlar',
    'images' => 'Görsel',
    'img' => 'Görsel Ayarları',
    'category' => 'Kategoriler',
    'cat' => 'Kategori Ayarları',
    'description' => 'Açıklama',
],

'main' => [
    'ssl' => ['title' => 'SSL Aktif Edilsin mi?', 'description' => 'Eğer siteniz https üzerinden çalışıyorsa bu seçeneği aktif edin'],
    'author' => ['title' => 'Yazar Girişi', 'description' => 'Haber yazarının girişini girin'],
    'api' => ['title' => 'The Movie Database API', 'description' => 'TMDB API anahtarını girin'],
    'parselaunge' => ['title' => 'Modül Dili', 'description' => 'Yönetici panelindeki modül dilini seçin'],
    'launge' => ['title' => 'TMDB Verilerinin Dili', 'description' => 'TMDB verilerinin dilini seçin'],	
    'idtmdb' => ['title' => 'TMDB ID', 'description' => 'TMDB ID için ek alanı seçin'],
    'typetmdb' => ['title' => 'Video Türü', 'description' => 'Tv veya film türü için ek alanı seçin'],
    'blacklist' => ['title' => 'Film Kara Listesi', 'description' => 'Her bir filmi virgülle ayırarak kara listeye ekleyin'],
],

'data' => [
    'title' => 'Başlık',
    'short_story' => 'Kısa Açıklama',
    'full_story' => 'Tam Açıklama',
    'alt_name' => 'Makale URL\'si',
    'tags' => 'Etiket Bulutu',
    'meta_title' => 'Meta Tag Başlık',
    'descr' => 'Meta Tag Açıklama',
    'keywords' => 'Meta Tag Anahtar Kelimeler',
],

'images' => [
    'posters' => ['poster' => 'Ana Poster', 'selectposter' => 'Yüklenen posterlerden ilk görsel', 'selectimage' => 'Yüklenen ekran görüntülerinden ilk görsel'],
    'screens' => ['screens' => 'Ekran Görüntüleri'],
    'imagesize' => ['w45' => 'w45', 'w92' => 'w92', 'w154' => 'w154', 'w185' => 'w185', 'w300' => 'w300', 'w500' => 'w500', 'w780' => 'w780', 'w1280' => 'w1280', 'original' => 'orijinal'],
    'mainposter' => ['title' => 'Ana posteri yüklemek istiyor musunuz?', 'description' => 'Ana posteri yüklemek istiyor musunuz?'],
    'sizeposter' => ['title' => 'Yüklenen posterlerin boyutu', 'description' => 'Yüklenen posterlerin boyutunu seçin'],
    'dopposter' => ['title' => 'Ek posteri yüklemek istiyor musunuz?', 'description' => 'Ek posteri yüklemek istiyor musunuz?'],
    'countposter' => ['title' => 'Poster Sayısı', 'description' => 'Yüklenen ek poster sayısı'],
    'selectposter' => ['title' => 'Posterleri parse ederken seçmek istiyor musunuz?', 'description' => 'Posterleri parse ederken seçmek istiyor musunuz?'],
    'mainscreen' => ['title' => 'Ana arka planı yüklemek istiyor musunuz?', 'description' => 'Ana arka planı yüklemek istiyor musunuz?'],
    'sizescreen' => ['title' => 'Yüklenen ekran görüntülerinin boyutu', 'description' => 'Yüklenen ekran görüntülerinin boyutunu seçin'],
    'screens' => ['title' => 'Ekran görüntülerini yüklemek istiyor musunuz?', 'description' => 'Ekran görüntülerini yüklemek istiyor musunuz?'],
    'countscreen' => ['title' => 'Ekran Görüntüsü Sayısı', 'description' => 'Yüklenen ekran görüntüsü sayısı'],
    'selectscreen' => ['title' => 'Ekran görüntülerini parse ederken seçmek istiyor musunuz?', 'description' => 'Ekran görüntülerini parse ederken seçmek istiyor musunuz?'],
],

'descr' => [
    'title' => ['name' => 'Başlık', 'descr' => 'Tip: string'],
    'original_title' => ['name' => 'Orijinal Başlık', 'descr' => 'Tip: string'],
    'description' => ['name' => 'Açıklama', 'descr' => 'Tip: string'],
    'original_language' => ['name' => 'Orijinal Dil', 'descr' => 'Tip: string'],
    'popularity' => ['name' => 'Popülerlik', 'descr' => 'Tip: string'],
    'revenue' => ['name' => 'Gelir', 'descr' => 'Tip: string'],
    'runtime' => ['name' => 'Süre (dakika)', 'descr' => 'Tip: string'],
    'status' => ['name' => 'Durum', 'descr' => 'Tip: string'],
    'tagline' => ['name' => 'Slogan', 'descr' => 'Tip: string'],
    'vote_average' => ['name' => 'Oy Sayısı', 'descr' => 'Tip: string'],
    'id' => ['name' => 'Film ID', 'descr' => 'Tip: string'],
    'imdb_id' => ['name' => 'IMDB ID', 'descr' => 'Tip: string'],
    'type' => ['name' => 'Tür (movie, tv)', 'descr' => 'Tip: string'],
    'budget' => ['name' => 'Bütçe', 'descr' => 'Tip: string'],
    'year' => ['name' => 'Yıl', 'descr' => 'Tip: string'],
    'release_date' => ['name' => 'Çıkış Tarihi', 'descr' => 'Tip: string'],
    'genres' => ['name' => 'Kategoriler', 'descr' => 'Tip: string'],
    'production_companies' => ['name' => 'Yapım Şirketleri', 'descr' => 'Tip: string'],
    'spoken_languages' => ['name' => 'Filmde Konuşulan Diller', 'descr' => 'Tip: string'],
    'cast' => ['name' => 'Oyuncular', 'descr' => 'Tip: string'],
    'crew' => ['name' => 'Ekip', 'descr' => 'Tip: string'],
    'production_countries' => ['name' => 'Ülkeler', 'descr' => 'Tip: string'],
    'posterpath' => ['name' => 'Ana Poster', 'descr' => 'Tip: string, yüklenen resim'],
    'backdrop' => ['name' => 'Ana Arka Plan', 'descr' => 'Tip: string, yüklenen resim'],
    'screens' => ['name' => 'Ekran Görüntüleri', 'descr' => 'Tip: galeri yüklenen resim'],
    'posters' => ['name' => 'Posterler', 'descr' => 'Tip: galeri yüklenen resim'],
    'screen_X' => ['name' => 'Ana Poster', 'descr' => 'Tip: string, yüklenen resim, X yerine ekran görüntüsü numarası birden başlar'],
    'poster_X' => ['name' => 'Ana Poster', 'descr' => 'Tip: string, yüklenen resim, X yerine poster numarası birden başlar'],
],

'parselaunge' => [
    'ru-RU' => 'RU',
    'en-US' => 'EN',
    'ar-SA' => 'SA',
    'be-BY' => 'BY', 
    'bg-BG' => 'BG', 
    'bs-BS' => 'BS', 
    'hu-HU' => 'HU', 
    'vi-VN' => 'VN', 
    'nl-NL' => 'NL', 
    'ka-GE' => 'GE', 
    'da-DK' => 'DK', 
    'he-IL' => 'IL', 
    'id-ID' => 'ID', 
    'es-ES' => 'ES', 
    'es-MX' => 'MX', 
    'it-IT' => 'IT', 
    'zh-CN' => 'CN', 
    'zh-TW' => 'TW', 
    'ko-KR' => 'KR', 
    'lv-LV' => 'LV', 
    'lt-LT' => 'LT', 
    'lb-LB' => 'LB', 
    'ms-MY' => 'MY', 
    'de-DE' => 'DE', 
    'no-NO' => 'NO', 
    'fa-IR' => 'IR', 
    'pl-PL' => 'PL', 
    'pt-BR' => 'BR', 
    'pt-PT' => 'PT', 
    'ro-RO' => 'RO', 
    'sr-RS' => 'RS', 
    'sk-SK' => 'SK', 
    'th-TH' => 'TH', 
    'tr-TR' => 'TR', 
    'uz-UZ' => 'UZ', 
    'uk-UA' => 'UA', 
    'fi-FI' => 'FI', 
    'fr-CA' => 'CA', 
    'fr-FR' => 'FR', 
    'hr-HR' => 'HR', 
    'cs-CZ' => 'CZ', 
    'sv-SE' => 'SE', 
    'ja-JP' => 'JP'
],
'modulelaige' => [
    'ru' => 'Rusça', 
    'en' => 'İngilizce'
],
];
?>
]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
</dleplugin>